
;; IO

(defjsclass *out-ec2 (*output))

(defmeta *out-ec2
  (title "Out")
  (type :out)
  (style grey-rect-style))

(defjsclass *in-ec2 (*input))

(defmeta *in-ec2
  (title "EC2")
  (type :in)
  (style grey-rect-style))

(defjsclass *in-yo (*input))

(defmeta *in-yo
  (title "YO")
  (type :in)
  (style grey-turned-rect-style)
  (connects (array *out-ec2)))

;; Actions

(defjsclass *my-action (*action))

(defmeta *my-action
  (title "Action title")
  (shape *rectangle-shape)
  (inputs (array *in-ec2 *in-yo))
  (outputs (array *out-ec2)))

;; Main

(defun blame (opt)
  (-> console (log opt)))

(defun build-unit (flow)
  (flet ((got-selected (action)
           (-> action shape shape (attr "fill" "#ff0000"))))
    (-> flow (add-action *my-action))))

(defun main ()
  (let* ((paper (*raphael (-> document (get-element-by-id "main")) "100%" 480))
         (flow (new (*flow paper (create)))))
    (setf (@ window paper) paper
          (@ window flow) flow
          (@ window units) (mapcar #'build-unit
                                   (list flow flow flow)))))
